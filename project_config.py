#!/usr/bin/env python3\n\"\"\"\n项目配置文件 - 统一配置管理\n支持新的配置文件结构，提供向后兼容性\n\"\"\"\n\nimport json\nfrom pathlib import Path\nfrom typing import Any, Dict\n\ntry:\n    import yaml\n    YAML_AVAILABLE = True\nexcept ImportError:\n    YAML_AVAILABLE = False\n\nclass ProjectConfig:\n    \"\"\"项目配置管理 - 支持新的统一配置结构\"\"\"\n\n    def __init__(self, config_file: str = \"config.yaml\"):\n        self.config_file = config_file\n        self.config = self.load_config()\n\n    def load_config(self) -> Dict[str, Any]:\n        \"\"\"加载配置文件 - 支持新的统一配置结构\"\"\"\n        config_path = Path(self.config_file)\n\n        if not config_path.exists():\n            print(f\"警告: 配置文件 {self.config_file} 不存在，使用默认配置\")\n            return self._get_default_config()\n\n        try:\n            if YAML_AVAILABLE:\n                with open(config_path, 'r', encoding='utf-8') as f:\n                    loaded_config = yaml.safe_load(f) or {}\n            else:\n                print(\"警告: 未安装yaml库，无法读取配置文件\")\n                return self._get_default_config()\n\n            # 验证并转换配置结构\n            return self._normalize_config(loaded_config)\n\n        except Exception as e:\n            print(f\"警告: 配置文件加载失败，使用默认配置: {e}\")\n            return self._get_default_config()\n\n    def _get_default_config(self) -> Dict[str, Any]:\n        \"\"\"获取默认配置（向后兼容）\"\"\"\n        return {\n            # API配置\n            \"api\": {\n                \"api_key\": \"\",\n                \"api_base\": \"https://api.openai.com/v1\"\n            },\n            # 模型配置\n            \"models\": {\n                \"extraction_model\": \"gemini-2.5-flash\",\n                \"generation_model\": \"gemini-2.5-pro\",\n                \"extraction_temperature\": 0.3,\n                \"generation_temperature\": 0.2,\n                \"worldbook_temperature\": 0.2,\n                \"max_tokens\": 60000,\n                \"timeout\": 300\n            },\n            # 输入配置\n            \"input\": {\n                \"source_file\": \"a.txt\",\n                \"encoding\": \"utf-8\"\n            },\n            # 输出配置\n            \"output\": {\n                \"chunk_dir\": \"chunks\",\n                \"character_responses_dir\": \"character_responses\",\n                \"character_responses_raw_dir\": \"character_responses_raw\",\n                \"character_responses_bad_dir\": \"character_responses_bad\",\n                \"roles_json_dir\": \"roles_json\",\n                \"cards_dir\": \"cards\",\n                \"wb_responses_dir\": \"wb_responses\",\n                \"wb_raw_responses_dir\": \"wb_raw_responses\",\n                \"wb_bad_chunks_dir\": \"wb_bad_chunks\",\n                \"worldbook_dir\": \"worldbook\"\n            },\n            # 文本处理配置\n            \"text_processing\": {\n                \"max_chunk_chars\": 30000,\n                \"buffer_chars\": 200,\n                \"split_method\": \"size\",\n                \"chapter_patterns\": [\n                    \"第[一二三四五六七八九十百千万\\\\d]+章\",\n                    \"第[一二三四五六七八九十百千万\\\\d]+节\",\n                    \"第[一二三四五六七八九十百千万\\\\d]+回\"\n                ]\n            },\n            # 性能配置\n            \"performance\": {\n                \"max_concurrent\": 1,\n                \"retry_limit\": 5,\n                \"retry_delay\": 10,\n                \"rate_limit_delay\": 5\n            },\n            # 相似度配置\n            \"similarity\": {\n                \"name_threshold\": 0.85,\n                \"content_threshold\": 0.8,\n                \"name_boost_threshold\": 0.9\n            },\n            # 验证配置\n            \"validation\": {\n                \"min_character_name_length\": 2,\n                \"min_content_length\": 20,\n                \"max_entries\": 2000,\n                \"max_features_per_character\": 5,\n                \"max_dialogues_per_character\": 3\n            },\n            # 角色筛选配置\n            \"character_filter\": {\n                \"keep_count\": 50,\n                \"backup_filtered\": True\n            }\n        }\n\n    def _normalize_config(self, config: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"标准化配置结构，确保向后兼容性\"\"\"\n        # 如果是新的配置结构，直接返回\n        if 'api' in config and 'models' in config:\n            return config\n\n        # 如果是旧的配置结构，进行转换\n        normalized = self._get_default_config()\n\n        # 转换旧的配置项到新结构\n        if 'api_key' in config:\n            normalized['api'] = {\n                'api_key': config.get('api_key', ''),\n                'api_base': config.get('api_base', '')\n            }\n\n        if 'model' in config or 'pro_model' in config:\n            normalized['models'].update({\n                'extraction_model': config.get('model', 'gemini-2.5-flash'),\n                'generation_model': config.get('pro_model', 'gemini-2.5-pro')\n            })\n\n        # 保持其他配置项\n        for key, value in config.items():\n            if key not in ['api_key', 'api_base', 'model', 'pro_model']:\n                normalized[key] = value\n\n        return normalized\n\n    def get(self, key: str, default=None):\n        \"\"\"获取配置项，支持点号分隔的嵌套键\"\"\"\n        keys = key.split('.')\n        value = self.config\n\n        for k in keys:\n            if isinstance(value, dict) and k in value:\n                value = value[k]\n            else:\n                return default\n\n        return value\n\n    def get_api_config(self) -> Dict[str, str]:\n        \"\"\"获取API配置\"\"\"\n        # 支持新旧配置结构\n        if 'api' in self.config:\n            return self.config['api']\n        else:\n            return {\n                'api_key': self.config.get('api_key', ''),\n                'api_base': self.config.get('api_base', '')\n            }\n\n    def get_model_config(self) -> Dict[str, Any]:\n        \"\"\"获取模型配置\"\"\"\n        # 支持新旧配置结构\n        if 'models' in self.config:\n            return self.config['models']\n        else:\n            return {\n                'extraction_model': self.config.get('model', 'gemini-2.5-flash'),\n                'generation_model': self.config.get('pro_model', 'gemini-2.5-pro'),\n                'extraction_temperature': 0.3,\n                'generation_temperature': 0.2,\n                'max_tokens': 60000,\n                'timeout': 300\n            }\n\n\n# 全局配置实例\n_global_config = None\n\ndef get_config() -> ProjectConfig:\n    \"\"\"获取全局配置实例\"\"\"\n    global _global_config\n    if _global_config is None:\n        _global_config = ProjectConfig()\n    return _global_config\n\ndef reload_config():\n    \"\"\"重新加载配置\"\"\"\n    global _global_config\n    _global_config = ProjectConfig()\n\nif __name__ == \"__main__\":\n    # 测试配置系统\n    cfg = get_config()\n    print(\"=== 配置系统测试 ===\")\n    print(f\"API配置: {cfg.get_api_config()}\")\n    print(f\"模型配置: {cfg.get_model_config()}\")\n    print(f\"输入文件: {cfg.get('input.source_file', 'a.txt')}\")\n    print(f\"相似度阈值: {cfg.get('similarity.name_threshold', 0.85)}\")\n    print(\"配置系统测试完成\")